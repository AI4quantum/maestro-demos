apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: quri agent
  labels:
    app: mas-example
spec:
  framework: code
  mode: local
  description: Uses the QURI tool to measure the ground state energy of a molecule using QURI Chemistry
  instructions: |
    Input:
              • molecule (dictionary)  # proper key value pairs for atom, basis, spin, charge and active space are required

    Task:
    Given an input molecule, use the quri tool to find the ground state energy of a molecule.  All the functionality is already implemented in the function, simply execute the function with the given parameters as the input, and then return the output (which should be QSCI energy).
    Directly print the output.
  code: |
    from qiskit_ibm_catalog import QiskitFunctionsCatalog
    catalog = QiskitFunctionsCatalog()
    function = catalog.load("qunasys/quri-chemistry")


    def query_quri(molecule: dict) -> float:
        """
        Fetches the ground state energy of a given molecule using QURI Chemistry

        Args:
            molecule (dict): see QURI reference or open fermion

        Returns:
            A float of the QSCI energy
        """
        qsci_setting = {"n_shots": 1e5, "number_of_states_pick_out": 12000}

        qsci_double_exc_json = {
          "ansatz": "DoubleExcitation",
          "state_prep_method": "CCSD",  
          "ansatz_setting": {
              "n_amplitudes": 20
          },
        }

        mitigation_setting = {  # Refer to the "Error mitigation" section for details.
          "configuration_recovery": {"number_of_states_pick_out": 10000}
        }

        job = function.run(
          method="QSCI",
          molecule=molecule,
          circuit_options=qsci_double_exc_json,
          qsci_setting=qsci_setting,
          mitigation_setting=mitigation_setting,
          instance="TODO_REPLACEME_CLOUD_RESROUCE_NAME",
          backend_name="ibm_torino",
        )

        result = job.result()

        return result["qsci_energy"]
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: mock quri
  labels:
    app: mas-example
spec:
  framework: code
  mode: local
  description: Uses the QURI tool to measure the ground state energy of a molecule using QURI Chemistry
  instructions: |
    Input:
              • molecule (dictionary)  # proper key value pairs for atom, basis, spin, charge and active space are required

    Task:
    Given an input molecule, use the quri tool to find the ground state energy of a molecule.  All the functionality is already implemented in the function, simply execute the function with the given parameters as the input, and then return the output (which should be QSCI energy).
    Directly print the output.
  code: |
    import ast

    print("Using molecule coordinates " + ast.literal_eval(input[0])["cord_str"])
    print("QSCI energy: -76.05069405129802 Ha")

    output = ast.literal_eval(input[0])["initial_input"]
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: open fermion
  labels:
    app: mas-example
spec:
  framework: code
  mode: local
  description: Uses the open fermion library to get the coordinates of a molcule
  instructions: |
    Input:
              • molecule (string)  

    Task:
    Given an input string call the fermion library to get the coordinates fo the molcule
  code: |
    import openfermion

    molecule = openfermion.chem.geometry_from_pubchem(input[0], "3d")

    cord_str = ""
    for atom in molecule:
      cord_str += atom[0] + " "
      index = 0
      while index < len(atom[1])-1:
        cord_str += str(atom[1][index]) + " "
        index += 1
      cord_str += str(atom[1][index]) + "; "

    output = {
      "cord_str": cord_str,
      "initial_input": input[0]
    }

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: pubchem agent
  labels:
    app: mas-example
spec:
  framework: code
  mode: local
  description: Uses the rdkit tool to query the pubchem database about a molecule
  instructions: |
    Input:
              • molecule (string) 

    Task:
    Given an input molecule, use the rdkit tool to find the ground state energy of a molecule.  All the functionality is already implemented in the function, simply execute the function with the given parameters as the input, and then return the output.
    Directly print the output.
  code: |
    from rdkit import Chem
    from rdkit.Chem import AllChem, Draw
    import pubchempy as pcp

    def query_pubchem(molecule: str) -> str:
        """
        Fetches information about an input string molecule from the pubchem database

        Args:
            molecule (str): name of th emolecule to search such as Water

        Returns:
            saves a render and returns a string representation of the molecule
        """
        
        compound = pcp.get_compounds(molecule, 'name')[0]

        print(compound.molecular_formula)

        return input[0]
 
    query_pubchem(input[0])
    output = input[0]
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: news patents papers
  labels:
    app: mas-example 
spec:
  framework: code
  mode: local
  description: Uses the fetch papers tool in order to retreive news patents and papers related to the search term.
  instructions: |
    Input:
              • search term (string) # e.g. "h2o"
              • max_results (int)  # e.g. "5" for the 5 most recent papers.
  code: |
    import arxiv
    import requests
    import json
    from GoogleNews import GoogleNews

    def fetch_arxiv_papers(search: str) -> str:
        """
        Fetches titles of papers in the given arXiv subject 

        Args:
            search (str): e.g. "h2o"

        Returns:
            A list of paper titles
        """
        client = arxiv.Client()

        arx_search = arxiv.Search(
            query = search,
            max_results = 5,
            sort_by = arxiv.SortCriterion.SubmittedDate
        )

        results = client.results(arx_search)

        papers_output = []
        for paper in results:
            papers_output.append({"title": paper.title, "link": paper.entry_id, "summary": paper.summary})
        
        print("Retrieved arxiv papers...")
        return(papers_output)

        
    def fetch_news(search: str) -> str:
        """
        Fetches news articles related to the search term

        Args:
            search (str): e.g. "h2o"

        Returns:
            list of news articles
        """
        googlenews = GoogleNews()
        googlenews.search(search)

        news_output = []
        for article in googlenews.results():
            news_output.append({"title": article["title"], "link": article["link"]})

        print("Retrieved news articles...")
        return(news_output)

    def fetch_patents(search: str) -> str:
        """
        Fetches patents related to the search term

        Args:
            search (str): e.g. "h2o"

        Returns:
            list of patents

        """
        headers = {
        'X-API-KEY': 'placeholder',
        'Content-Type': 'application/x-www-form-urlencoded',
        }

        if headers["X-API-KEY"] == "placeholder":
            return [{"title": "placeholder", "application number": 0}]
        else:
            data = '{"q":"applicationMetaData.inventionTitle:'+search+'","pagination":{"limit": 5}}'

            response = requests.post('https://api.uspto.gov/api/v1/patent/applications/search', headers=headers, data=data)
            print("Retrieved patents...")
            formatted_patents = json.loads(response.content)

            patents_output = []
            for patent in formatted_patents["patentFileWrapperDataBag"]:
                patents_output.append({"title": patent["applicationMetaData"]["inventionTitle"], "applicationNumber": patent["applicationNumberText"]})
            
            return patents_output

    final_output = {}
    final_output["news"] = fetch_news(input[0])
    final_output["papers"] = fetch_arxiv_papers(input[0])
    final_output["patents"] = fetch_patents(input[0])

    output = final_output
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: generate summary
  labels:
    app: mas-example 
spec:
  model: granite3.3:latest
  framework: beeai
  mode: remote
  description: Uses the input to summarize the arxiv papers, news, and patent results
  instructions: |
    You are a paper‐summary agent. You will receive exactly one valid JSON object as your input.
    This JSON object contains titles and links for arxiv papers, news, and patent results.
    The format of the JSON object is as follows:

    {
      'news': [
        {
          'title': 'placeholder',
          'link': 'placeholder'
        }
      ],
      'papers': [
        {
          'title': 'placeholder',
          'link': 'placeholder',
          'summary': 'placeholder'
        }
      ],
      'patents': [
        {
          'title': 'placeholder',
          'link': 'placeholder'
        }
      ]
    }

    Your task is to iterate through the JSON object and output a two-paragraph plain-text summary in the following format using the LLM tool:

    **Summary:**

    **Paragraph 1:** Iterate through the news and summarize the top three most interesting article titles.  Then, expand on the titles.  Use clear and concise language, aiming to provide a more detailed explanation than the original abstract while maintaining accuracy.
    
    **Paragraph 2:** Iterate through the papers the top three most interesting paper titles.  Output an easy to digest summary of these entries by identifying and explaining any crucial technical terms, methodologies, or concepts that are essential for understanding the paper's context and significance. Frame these explanations in a way that a general technical reader, who may not be an expert in the specific field, can grasp their meaning and relevance to the research.

    **Paragraph 3:** Iterate through the patents and summarize the top three most interesting patent titles.  Then, expand on the titles.  Use clear and concise language, aiming to provide a more detailed explanation than the original abstract while maintaining accuracy.

    **Sources** Provide a bulleted list of links to the sources used when creating the sumary paragraphs.

    **Constraints:**
    - Do not output JSON or attempt to look up anything.
    - Do not mention JSON in the output.
    - Do not include extra sections or bullet points within the paragraphs (except for the sources cited at the end).
    - Ensure the full summary is approximately 150–300 words.

  tools: 
    - 'LLM'
