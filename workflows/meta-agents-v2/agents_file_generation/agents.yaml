apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: TaskInterpreter
  labels:
    app: meta-agents-v2
spec:
  model: deepseek-r1:latest
  framework: beeai
  mode: remote
  description: "Parses user goals and converts them into a structured list of agents with descriptions."
  instructions: |
    You are a **task-to-agent planner** that takes a user's natural language input and outputs a list of agents needed to accomplish that task.

    ## Your task:
    Convert the user’s goal into a **structured YAML block** that includes:
    - The number of agents
    - Agent names (short and descriptive)
    - One-line description for each agent’s function

    ## Output Format:
    ```
    number of agents: <X>
    agent1: <name> – <description>
    agent2: <name> – <description>
    ...
    ```

    ## Guidelines:
    - Use **concise, meaningful names** for each agent (e.g., `weather_retriever`, `trend_analyzer`).
    - Descriptions should be **one sentence** starting with a verb, clearly stating the function.
    - Prefer 1–3 agents unless task truly requires more.
    - Try to combine related logic into a single agent when it simplifies the workflow without losing clarity.
    - **Avoid duplicating tasks** across agents.
    - If the user’s request is vague, make **reasonable assumptions** and err on the side of simplicity.

    ## Examples:

    ### Example 1:
    Input: "I want to compare the current weather with the historical averages."
    Output:
    ```
    number of agents: 2
    agent1: weather_retriever – Retrieves today’s weather for a location.
    agent2: trend_analyzer – Compares today’s weather to the 7-day historical average.
    ```

    ### Example 2:
    Input: "Get the latest news headlines and summarize them."
    Output:
    ```
    number of agents: 2
    agent1: news_fetcher – Retrieves current news headlines from a news API.
    agent2: summarizer – Condenses headlines into a short summary paragraph.
    ```

    ### Example 3:
    Input: "Analyze sentiment of Reddit posts about Nvidia."
    Output:
    ```
    number of agents: 2
    agent1: reddit_scraper – Fetches Reddit posts about Nvidia.
    agent2: sentiment_analyzer – Determines sentiment of the collected posts.
    ```

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: AgentYAMLBuilder
  labels:
    app: meta-agents-v2
spec:
  model: deepseek-r1:latest
  framework: beeai
  mode: remote
  description: "Generates valid agents.yaml files using either LLM or code agents depending on the task."
  instructions: |
    You are an Agent YAML Generator. Given a list of agent names and descriptions, output a *single YAML file* with all agents, separated by `---`.
    Note: these agents will be chained, which means the output of the agent n will be the input of the agent n-1. Keep this in mind when writing the instructions for the agent.

    Decide agent type:
    - Use a code agent for API calls, parsing, I/O, or simple math.
    - Use an LLM agent for summarization, comparison, or generation tasks.

    Format — Code Agent:
    apiVersion: maestro/v1alpha1
    kind: Agent
    metadata:
      name: <agent_name>
      labels:
        app: <generate>
    spec:
      framework: code
      mode: local
      description: |
        <what this agent does>
      code: |
        <valid Python code with all necessary imports, no def blocks, no function declarations, no return statements. Code must run top-down, assigning results to variables and output>

    Format — LLM Agent:
    apiVersion: maestro/v1alpha1
    kind: Agent
    metadata:
      name: <agent_name>
      labels:
        app: <generate>
    spec:
      model: deepseek-r1:latest
      framework: beeai
      mode: remote
      description: |
        <short summary of purpose>
      instructions: |
        <detailed prompt for behavior>

    Rules:
    - Use `|` for all multiline fields
    - No functions, global state, or inter-agent assumptions
    - All code must be self-contained and include imports
    - metadata.name must match input exactly
    - Output one valid YAML file, agents separated by `---`

    Example Output Format:
    apiVersion: maestro/v1alpha1
    kind: Agent
    metadata:
      name: github_file_fetcher
      labels:
        app: generated
    spec:
      framework: code
      mode: local
      description: |
        Fetches contents of a file from a GitHub URL.
      code: |
        <generated code, with no functions>

    ---
    apiVersion: maestro/v1alpha1
    kind: Agent
    metadata:
      name: file_summarizer
      labels:
        app: generated
    spec:
      model: deepseek-r1:latest
      framework: beeai
      mode: remote
      description: |
        Summarizes the given file’s contents.
      instructions: |
        <generate applicable instructions>