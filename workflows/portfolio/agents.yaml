apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: portfolio
  labels:
    app: portfolio optimizer
spec:
  framework: code
  mode: local
  description: portfolio optimizer
  instructions: call portfolio optimizer with data
  code: |
    import pandas as pd
    import json
    import time
    from qiskit_ibm_catalog import QiskitFunctionsCatalog

    class mock_result:
      job_id = "mock_job_id"
      def status(self):
         return "DONE"

      def result(self):
        result = {
          'time_step_0': {
            '8801.T': 0.11764705882352941,
            'ITX.MC': 0.20588235294117646,
            'META': 0.38235294117647056,
            'GBPJPY=X': 0.058823529411764705,
            'TMBMKDE-10Y': 0.0,
            'CLF': 0.058823529411764705,
            'XS2239553048': 0.17647058823529413
          },
          'time_step_1': {
            '8801.T': 0.11428571428571428,
            'ITX.MC': 0.14285714285714285,
            'META': 0.2,
            'GBPJPY=X': 0.02857142857142857,
            'TMBMKDE-10Y': 0.42857142857142855,
            'CLF': 0.0,
            'XS2239553048': 0.08571428571428572
          },
          'time_step_2': {
            '8801.T': 0.0,
            'ITX.MC': 0.09375,
            'META': 0.3125,
            'GBPJPY=X': 0.34375,
            'TMBMKDE-10Y': 0.0,
            'CLF': 0.0,
            'XS2239553048': 0.25
          },
          'time_step_3': {
            '8801.T': 0.3939393939393939,
            'ITX.MC': 0.09090909090909091,
            'META': 0.12121212121212122,
            'GBPJPY=X': 0.18181818181818182,
            'TMBMKDE-10Y': 0.0,
            'CLF': 0.0,
            'XS2239553048': 0.21212121212121213
          }
        }
        metadata = {"all_samples_metrics": {"objective_costs": [1.25, 0.98], "states": [[0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1]], "rest_breaches": [0.0, 0.25], "sharpe_ratios": [1.1, 0.7], "returns": [0.15, 0.10]}}
        return {"result": result, "metadata": metadata}

    def mock_run(assets, qubo_settings, instance, channel): 
      return mock_result()

    # For not mock case
    #catalog = QiskitFunctionsCatalog(
    # 	     token='IQP token'
    #)
    #dpo_solver = catalog.load("global-data-quantum/quantum-portfolio-optimizer")

    assets = json.loads(input[0])
    qubo_settings = {
      "nt": 2,
      "nq": 2,
      "dt": 30,
      "max_investment": 25,
      "risk_aversion": 1000.0,
      "transaction_fee": 0.01,
      "restriction_coeff": 1.0,
    }

    dpo_job = mock_run(
    # For not mock case
    #dpo_job = dpo_solver.run(  
      assets=assets,
      qubo_settings=qubo_settings,
      instance='project-based/internal/functions',
      channel='ibm_quantum',
    )
    print(f"Job id: {dpo_job.job_id}")
    dpo_status = dpo_job.status()
    while dpo_status != "DONE" and dpo_status != "ERROR":
        dpo_status = dpo_job.status()
        print(dpo_status)
        time.sleep(30)

    if dpo_status == "ERROR":
       output = dpo_job.logs()
       print(dpo_job.result())
    else:
       dpo_result = dpo_job.result()

       # Convert metadata to a DataFrame
       df = pd.DataFrame(dpo_result["metadata"]["all_samples_metrics"])

       # Find the minimum objective cost 
       min_cost = df["objective_costs"].min()
       metadata = f"Minimum Objective Cost Found: {min_cost:.2f}\n"

       # Extract the row with the lowest cost
       best_row = df[df["objective_costs"] == min_cost].iloc[0]

       # Display the results associated with the best solution
       metadata += "Best Solution:\n"
       metadata += f"  - State: {best_row['states']}\n"
       metadata += f"  - Restriction Deviation: {best_row['rest_breaches']}%\n"
       metadata += f"  - Sharpe Ratio: {best_row['sharpe_ratios']:.2f}\n"
       metadata += f"  - Return: {best_row['returns']}"

       json_all = json.dumps({"data": dpo_result["result"], "metadata": metadata})
       output = json_all

---

apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: stock
  labels:
    app: stock historical data
spec:
  framework: code
  mode: local
  description: stock data
  instructions: retrive stock historical data
  code: |
    import yfinance as yf
    import pandas as pd
    import json
    from datetime import datetime, timedelta

    now = datetime.now()
    start = now - timedelta(weeks=20)
    start_date = start.strftime('%Y-%m-%d')
    end = now - timedelta(days=1)
    end_date = end.strftime('%Y-%m-%d')

    # Download data (1 week in days)
    #apple = yf.download('AAPL', start='2021-03-29', end='2021-04-05')
  
    all = {}
    for s in input[0].split(","):
      symbol = s.strip()
      df = yf.download(symbol, start=start_date, end=end_date)
      df.to_csv(symbol+".csv", index=True, header=False)
      df = pd.read_csv(symbol+".csv", header=None)
      one = {}
      for index, row in df.iterrows():
        one[row[0]]=row[1]
      all[symbol]=one
    json_all = json.dumps(all)
    output = json_all

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: get security tickers
  labels:
    app: portfolio optimizer
spec:
  framework: code
  mode: local
  description: |
    Resolves stock/company/bond names or tickers into valid trading symbols using Yahoo Finance API.
  instructions: |
    Input is a comma-separated string of company names, tickers, or bond names.
    Output is a clean comma-separated string of resolved ticker symbols.
  code: |
    import requests
    import json

    def search_yahoo_finance(query):
        url = f"https://query2.finance.yahoo.com/v1/finance/search?q={query}"
        headers = {'User-Agent': 'Mozilla/5.0'}
        try:
            response = requests.get(url, headers=headers, timeout=5)
            if response.status_code == 200:
                results = response.json().get("quotes", [])
                if results:
                    return results[0].get("symbol", None)
        except:
            pass
        return None

    user_input = input[0] if isinstance(input, (list, tuple)) and len(input) > 0 else input
    items = [x.strip() for x in user_input.split(",")]
    output_symbols = []
    for item in items:
        url = f"https://query1.finance.yahoo.com/v10/finance/quoteSummary/{item}?modules=price"
        headers = {'User-Agent': 'Mozilla/5.0'}
        try:
            r = requests.get(url, headers=headers, timeout=5)
            if r.status_code == 200:
                json_data = r.json()
                if json_data.get("quoteSummary", {}).get("result"):
                    output_symbols.append(item.upper())
                    continue
        except:
            pass

        resolved = search_yahoo_finance(item)
        if resolved:
            output_symbols.append(resolved.upper())
    output = ",".join(output_symbols)

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: plot
  labels:
    app: plot data
spec:
  framework: code
  mode: local
  description: stock data
  instructions: retrive stock historical data
  code: |
    import json
    import pandas as pd
    import matplotlib.pyplot as plt
    import csv
    from io import StringIO

    data = json.loads(input[0])["data"]
    csvfile = StringIO()

    fieldnames = data[list(data.keys())[0]].keys()
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    for time_step in data.keys():
        writer.writerow(data[time_step])

    csvfile.seek(0)
    df = pd.read_csv(csvfile)
    df.plot()
    plt.show()
    output = json.loads(input[0])["metadata"]
