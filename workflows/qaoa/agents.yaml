apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: preprocessing
  labels:
    app: qaoa
spec:
  framework: code
  mode: local
  description: preprocessing step for qaoa
  instructions: run the code
  code: |
    import numpy as np
    from qiskit.circuit.library import QAOAAnsatz
    from qiskit.quantum_info import SparsePauliOp
    from qiskit_serverless.serializers import circuit_serializer
    import json

    def sparse_pauli_op_serializer(operator):
        op = operator.to_list()
        json_data = json.dumps([{"pauli": pauli, "coeff": {"real": coeff.real, "imag": coeff.imag}} for pauli, coeff in op])
        return json_data

    def preprocessing():
        operator = SparsePauliOp.from_list([("IIIZZ", 1), ("IIZIZ", 1), ("IZIIZ", 1), ("ZIIIZ", 1)])
        ansatz = QAOAAnsatz(operator, reps=2)
        ansatz = ansatz.decompose(reps=3)

        opret = sparse_pauli_op_serializer(operator)
        anret = circuit_serializer(ansatz)

        return anret, opret

    a, o = preprocessing()
    print(f"ansatz:   {a}")
    print(f"operator: {o}")
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: quantum
  labels:
    app: qaoa
spec:
  framework: code
  mode: local
  description: quantum step for qaoa
  instructions: run the code
  code: |
    from qiskit_serverless import ServerlessClient
    from qiskit_serverless.serializers import circuit_deserializer, circuit_serializer
    from qiskit.quantum_info import SparsePauliOp
    from qiskit.circuit.library import QAOAAnsatz

    import os
    import time
    import logging
    import json

    logger = logging.getLogger(__name__)

    def sparse_pauli_op_serializer(operator):
        op = operator.to_list()
        json_data = json.dumps([{"pauli": pauli, "coeff": {"real": coeff.real, "imag": coeff.imag}} for pauli, coeff in op])
        return json_data

    def sparse_pauli_op_deserializer(json_data):
        loaded = json.loads(json_data)
        op_list = [(item["pauli"], complex(item["coeff"]["real"], item["coeff"]["imag"])) for item in loaded]
        operator = SparsePauliOp.from_list(op_list)
        return operator

    def qaoa(an, op):
        ansatz = circuit_deserializer(an)
        operator = sparse_pauli_op_deserializer(op)
        input_arguments = {
            "initial_point": None,
            "ansatz": ansatz,
            "operator": operator,
            "service": None,
            "backend": None,
        }
        logger.info("Connecting to Serverless client")
        serverless = ServerlessClient(
            token=os.environ.get("GATEWAY_TOKEN", "awesome_token"),
            host=os.environ.get("GATEWAY_HOST", "http://localhost:8000"),
        )
        logger.info("Client connection complete, running job")

        job = serverless.run("qaoa", arguments=input_arguments)
        logger.info("job run started")
        logger.info(f"job_id: {job.job_id}")
        # mocking wait until success
        time.sleep(60)
        logger.info("Job run complete (?)")
        logger.info(f"job status: {job.status()}")
        return job.job_id

    # mocking inputs from previous step
    operator = SparsePauliOp.from_list([("IIIZZ", 1), ("IIZIZ", 1), ("IZIIZ", 1), ("ZIIIZ", 1)])
    ansatz = QAOAAnsatz(operator, reps=2)
    ansatz = ansatz.decompose(reps=3)

    opret = sparse_pauli_op_serializer(operator)
    anret = circuit_serializer(ansatz)
    j = qaoa(anret, opret)
    print(f"Job ID: {j}")
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: postprocessing
  labels:
    app: qaoa
spec:
  framework: code
  mode: local
  description: postprocessing step for qaoa
  instructions: run the code
  code: |
    from qiskit_serverless import ServerlessClient
    import os
    import logging

    logger = logging.getLogger(__name__)

    def postprocessing(job_id):
        logger.info("Starting postprocessing")
        logger.info(f"job id: {job_id}")
        serverless = ServerlessClient(
            token=os.environ.get("GATEWAY_TOKEN", "awesome_token"),
            host=os.environ.get("GATEWAY_HOST", "http://localhost:8000"),
        )
        logger.info("client connection made")
        job = serverless.job(job_id)
        logger.info(f"job loaded: {job.job_id}")

        logger.info(f"status: {job.status()}")
        logger.info(f"result: {job.result()}")
        logger.info(f"logs: {job.logs()}")

        print(f"job result: {job.result()}")

    # mocking input from previous step
    serverless = ServerlessClient(
        token=os.environ.get("GATEWAY_TOKEN", "awesome_token"),
        host=os.environ.get("GATEWAY_HOST", "http://localhost:8000"),
    )
    j = serverless.get_jobs(limit=1)

    postprocessing(j[0].job_id)
