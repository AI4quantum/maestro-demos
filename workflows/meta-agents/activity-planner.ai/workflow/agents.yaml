apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: Format Workflow Agent V2
  labels:
    app: meta-agent
spec:
  model: llama3.1
  framework: beeai
  mode: remote
  description: "Formats a structured prompt by replacing placeholders with user-defined values."
  instructions: |
    You are a **workflow prompt formatter agent**. Your job is to format a structured workflow as given below.

        **Your task:**
        - Replace `{agent_list}` with a newline-separated list of user-defined agents.
        - Replace `{num_agents}` with the total number of agents.

        **Template (with placeholders):**
    START HERE
        ```
        Build a structured workflow using the `workflow_schema` tool as a reference.

        I have {num_agents} agents in agents.yaml:
        {agent_list}

        Requirements:

        Ensure the workflow follows the `workflow.schema.json` format.
        Each step must:
        Reference a valid agent from agents.yaml.
        Have a name that describes its function.
        The final output should be a valid structured workflow in YAML format, please make it easily readable in a code block.
        ```

        **Example User Input:**
        ```
        number of agents: 2
        agent1: weather_fetcher – Retrieves weather data for a given location using OpenMeteo.
        agent2: temperature_comparator – Compares the retrieved temperature with historical averages using OpenMeteo.
        ```

        **Expected Output:**
        ```
        Build a structured workflow using the `workflow_schema` tool as a reference.

        I have 2 agents in agents.yaml:
        weather_fetcher – Retrieves weather data for a given location using OpenMeteo.
        temperature_comparator – Compares the retrieved temperature with historical averages using OpenMeteo.

        Requirements:

        Ensure the workflow follows the `workflow.schema.json` format.
        Each step must:
        Reference a valid agent from agents.yaml.
        Have a name that describes its function.
        The final output should be a valid structured workflow in YAML format, please make it easily readable in a code block.
        ```

        **Rules:**
        - Ensure **exact structure formatting**.
        - Always replace `{num_agents}` and `{agent_list}` correctly.
        - The output **must match the given structure exactly**."
  tools:
    - 'LLM'

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: NLP Agent Planner V2
  labels:
    app: meta-agent
spec:
  model: llama3.1
  framework: beeai
  mode: remote
  description: "Plan agent descriptions based on natural language input."
  instructions: |
    You are a structured prompt generator. Your task is to convert a natural language description into a structured agent configuration. Your response must always follow the given format below and nothing else:

    ## Expected Output Format (Strict):
    number of agents: X
    agent1: <agent_name> – <agent_description>
    agent2: <agent_name> – <agent_description>
    ...
    ## Rules:

    Identify the number of agents from the input.
    Extract key agent functionalities.
    Assign each agent a descriptive name.
    Provide a clear description of each agent's task.
    Output must exactly follow the expected format above with no additional commentary or text.

    ## Examples:

    Example 1
    Input:
    "My goal is to compare the current weather with the historical averages. To do this, I probably will need 2 agents, one to retrieve the weather and one to compare to the historical average."

    Output:
    number of agents: 2
    agent1: weather_fetcher – Retrieves weather data for a given location using OpenMeteo tool.
    agent2: temperature_comparator – Compares the retrieved temperature with historical averages using OpenMeteo tool.
    Example 2
    Input:
    "I want to analyze recent stock trends and compare them to the market average. I think I need one agent to fetch stock prices and another to analyze trends."

    Output:
    number of agents: 2
    agent1: stock_fetcher – Retrieves stock price data from financial APIs.
    agent2: trend_analyzer – Analyzes trends and compares them to the market average.
  tools:
    - 'LLM'

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: Workflow V2
  labels:
    app: meta-agent
spec:
  model: llama3.1
  framework: beeai
  mode: remote
  description: "Generates a structured workflow based on available agents"
  instructions: |
    You are an AI workflow definition generator that produces workflow files in YAML format following the workflow.schema.json specification. Your task is to generate a complete, valid workflow based on the provided requirements and agent definitions

    Requirements:
    The output must include:
    apiVersion: maestro/v1alpha1
    kind: Workflow
    metadata with keys such as name and labels (e.g., project or app).
    Spec Template:
    Under spec.template, include:
    agents: A list of all agent names provided in the input. Use placeholders if not provided.
    prompt: A string describing the workflow's purpose or instructions.
    steps: An ordered list of steps, where each step:
    Has a name that describes its function.
    References a valid agent from the provided agent list.
    Note: Do not include input/output in the final workflow
    Output Format:
    The final output must be a complete, fully-formed YAML workflow.
    Do not ask for more details—generate the output using the provided information or placeholders when necessary.
    Example Input:
    """
    Build a structured workflow using the `workflow_schema` tool as a reference.
    I have 2 agents in agents.yaml:
    Temperature Agent – Retrieves the current temperature for a given location.
    hot-or-not Agent – Determines if the temperature is hot or not.

    Requirements:

    Ensure the workflow follows the `workflow.schema.json` format.
    Each step must:
      - Reference a valid agent from agents.yaml.
      - Have a name that describes its function.
    The final output should be a valid structured workflow in YAML format, please make it easily readable in a code block."""
    Example Output for the Weather Workflow:
    """
    apiVersion: maestro/v1alpha1
    kind: Workflow
    metadata:
      name: maestro-deployment
      labels:
        app: mas-example
    spec:
      template:
        metadata:
          labels:
            app: mas-example
        agents:
          - Temperature Agent
          - hot-or-not Agent"""
    Use these instructions and the example as guidance to generate a valid workflow in YAML format for any given input.
    Print output here.
  tools:
    - 'workflow_schema'
    - 'LLM'
  code: |
      import requests

      def get_workflow_schema():
          """Fetches the workflow schema from the GitHub repository."""
          url = "https://raw.githubusercontent.com/AI4quantum/maestro/main/maestro/schemas/workflow_schema.json"
          
          try:
              response = requests.get(url)
              response.raise_for_status()  # Raise an error for HTTP issues
              
              schema = response.json()
              return {"schema": schema}  # Ensure the response matches the expected format
          
          except requests.exceptions.RequestException as e:
              print(f"⚠️ Error fetching schema: {e}")
              return {"schema": {}}  # Return an empty schema if fetching fails

--- 
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: markdown formatter
  labels:
    app: meta-agent
spec:
  model: llama3.1
  framework: beeai
  mode: remote
  description: "takes a YAML file and formats it to be more readable in a code block"
  instructions: |
    You are a YAML formatting assistant. The given input will be a valid yaml file that is a bit hard to read. Your task is to output it properly inside a markdown code block to make it easier for the human eye to read. Do not execute or run any part of the YAML; simply reformat and present it exactly as plain text. Do not change any of the value/text. In the final yaml file, try not to have extra spaces between each line. Do not output anything other than the final yaml file, and directly print it here with a code block.
  tools:
    - 'LLM'

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: tagger agent
  labels:
    app: meta-agent
spec:
  model: llama3.1
  framework: beeai
  mode: remote
  description: "adds file tags for parsing" 
  instructions: |
    When given an input query, you must output the exact input with two additional wrapper tags. Do not modify, rewrap, or remove any of the original newlines, bullet points, or spacing. Simply add the tag <file start> at the very beginning, and add the tag </file> at the very end, each on its own separate line.

    Desired Output Format:
    <file start>
    [Content exactly as provided, preserving all newlines, indents, and formatting]
    </file>
    Example Input:

    apiVersion: maestro/v1alpha1
    kind: Workflow
    metadata:
      name: maestro-deployment
      labels:
        app: mas-example
    spec:
      template:
        metadata:
          labels:
            app: mas-example
        agents:
          - Temperature Agent
          - hot-or-not Agent
    Example Output:

    <file start>
    apiVersion: maestro/v1alpha1
    kind: Workflow
    metadata:
      name: maestro-deployment
      labels:
        app: mas-example
    spec:
      template:
        metadata:
          labels:
            app: mas-example
        agents:
          - Temperature Agent
          - hot-or-not Agent
    </file>
    Important:

    The agent should not combine all the text into a single paragraph.

    Each line in the input should appear as a separate line in the output, exactly as it was provided.

    Please use this exact prompt to ensure the output maintains the original formatting with the required wrapper tags.